{"ast":null,"code":"export default function paginationField() {\n  return {\n    keyArgs: false,\n    // tells appollo we will take care of everything\n    read: function read() {\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      console.log({\n        existing: existing,\n        args: args,\n        cache: cache\n      });\n      var skip = args.skip,\n          first = args.first; // read number of items from cache\n\n      var data = cache.readQuery({\n        query: query\n      }); //first thing apollo does is ask the read function for those items\n      // we can do 1 of 2 things\n      //return items in cache\n      // return false from here, make another network request\n    },\n    merg: function merg() {}\n  };\n}","map":{"version":3,"sources":["/Users/benaiahvarner/Documents/wesbos/advanced-react/Advanced-React/sick-fits/frontend/lib/paginationField.js"],"names":["paginationField","keyArgs","read","existing","args","cache","console","log","skip","first","data","readQuery","query","merg"],"mappings":"AAAA,eAAe,SAASA,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE,KADJ;AACW;AAChBC,IAAAA,IAFK,kBAEgC;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,QAAAA,QAAQ,EAARA,QAAF;AAAYC,QAAAA,IAAI,EAAJA,IAAZ;AAAkBC,QAAAA,KAAK,EAALA;AAAlB,OAAZ;AADiC,UAEzBG,IAFyB,GAETJ,IAFS,CAEzBI,IAFyB;AAAA,UAEnBC,KAFmB,GAETL,IAFS,CAEnBK,KAFmB,EAInC;;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAALA;AAAF,OAAhB,CAAb,CALmC,CAMnC;AACA;AACA;AACA;AACD,KAZI;AAaLC,IAAAA,IAbK,kBAaE,CAAE;AAbJ,GAAP;AAeD","sourcesContent":["export default function paginationField() {\n  return {\n    keyArgs: false, // tells appollo we will take care of everything\n    read(existing = [], { args, cache }) {\n        console.log({ existing, args, cache });\n        const { skip, first } = args;\n    \n      // read number of items from cache\n      const data = cache.readQuery({ query })\n      //first thing apollo does is ask the read function for those items\n      // we can do 1 of 2 things\n      //return items in cache\n      // return false from here, make another network request\n    },\n    merg() {},\n  };\n}\n"]},"metadata":{},"sourceType":"module"}