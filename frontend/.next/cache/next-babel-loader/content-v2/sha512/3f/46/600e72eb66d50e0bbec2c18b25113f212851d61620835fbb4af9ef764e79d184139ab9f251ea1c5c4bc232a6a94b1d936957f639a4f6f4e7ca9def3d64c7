{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/benaiahvarner/Documents/wesbos/advanced-react/Advanced-React/sick-fits/frontend/components/UpdateProduct.js\";\nimport { useQuery, useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id: ID!){\n        Product(where: { id: $id }) {\n            id\n            name\n            description\n            price\n        }\n    }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION($id: ID! $name: String $description: String $price: Int) {\n        updateProduct(\n            id: $id,\n            data: {\n            id: $id,\n            name: $name,\n            description: $description,\n            price: $price\n            }\n        ) {\n            id\n            name\n            description\n            price\n        }\n    }\n`;\n\nconst UpdateProduct = ({\n  id\n}) => {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  });\n  const [updateProduct, {\n    data: updateData,\n    error: updateError,\n    loading: updateLoading\n  }] = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id: id // pass in product updates here\n\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Update \", id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\nexport default UpdateProduct;","map":{"version":3,"sources":["/Users/benaiahvarner/Documents/wesbos/advanced-react/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["useQuery","useMutation","gql","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","data","error","loading","variables","updateProduct","updateData","updateError","updateLoading"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,gBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,oBAAoB,GAAGD,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAWA,MAAME,uBAAuB,GAAGF,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;;AAmBA,MAAMG,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AAC9B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BT,QAAQ,CAACG,oBAAD,EAAuB;AAC7DO,IAAAA,SAAS,EAAE;AAACJ,MAAAA;AAAD;AADkD,GAAvB,CAAzC;AAIA,QAAM,CAACK,aAAD,EAAgB;AAACJ,IAAAA,IAAI,EAAEK,UAAP;AAAmBJ,IAAAA,KAAK,EAAEK,WAA1B;AAAuCJ,IAAAA,OAAO,EAAEK;AAAhD,GAAhB,IAAkFb,WAAW,CAACG,uBAAD,EAA0B;AACzHM,IAAAA,SAAS,EAAE;AACPJ,MAAAA,EAAE,EAAEA,EADG,CAEP;;AAFO;AAD8G,GAA1B,CAAnG;AAMA,sBACI;AAAA,0BACYA,EADZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAhBD;;AAkBA,eAAeD,aAAf","sourcesContent":["import { useQuery, useMutation } from '@apollo/client'\nimport gql from 'graphql-tag'\n\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id: ID!){\n        Product(where: { id: $id }) {\n            id\n            name\n            description\n            price\n        }\n    }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION($id: ID! $name: String $description: String $price: Int) {\n        updateProduct(\n            id: $id,\n            data: {\n            id: $id,\n            name: $name,\n            description: $description,\n            price: $price\n            }\n        ) {\n            id\n            name\n            description\n            price\n        }\n    }\n`;\n\nconst UpdateProduct = ({ id }) => {\n    const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\n       variables: {id}, \n    })\n\n    const [updateProduct, {data: updateData, error: updateError, loading: updateLoading}] = useMutation(UPDATE_PRODUCT_MUTATION, {\n        variables: {\n            id: id\n            // pass in product updates here\n        }\n    })\n    return (\n        <div>\n            Update {id}\n        </div>\n    )\n}\n\nexport default UpdateProduct\n"]},"metadata":{},"sourceType":"module"}